#!/system/bin/sh
#
# unbound-control-setup.sh - set up SSL certificates for unbound-control
#
# Copyright (c) 2008, NLnet Labs. All rights reserved.
#
# This software is open source.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# Neither the name of the NLNET LABS nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# settings:

export PATH=.:$PATH:/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin

# directory for files
DESTDIR=.

# issuer and subject name for certificates
SERVERNAME=unbound
CLIENTNAME=unbound-control

# validity period for certificates
DAYS=7200

# size of keys in bits
BITS=3072

# hash algorithm
HASH=sha256

# base name for unbound server keys
SVR_BASE=unbound_server

# base name for unbound-control keys
CTL_BASE=unbound_control

# we want -rw-r----- access (say you run this as root: grp=yes (server), all=no).
umask 0027

# end of options

# functions:
error ( ) {
	echo "$0 fatal error: $1"
	exit 1
}

# check arguments:
while test $# -ne 0; do
	case $1 in
	-d)
	if test $# -eq 1; then error "need argument for -d"; fi
	DESTDIR="$2"
	shift
	;;
	*)
	echo "unbound-control-setup.sh - setup SSL keys for unbound-control"
	echo "	-d dir	use directory to store keys and certificates."
	echo "		default: $DESTDIR"
	echo "please run this command using the same user id that the "
	echo "unbound daemon uses, it needs read privileges."
	exit 1
	;;
	esac
	shift
done

# go!:
echo "setup in directory $DESTDIR"
cd "$DESTDIR" || error "could not cd to $DESTDIR"

# create certificate keys; do not recreate if they already exist.
if test -f $SVR_BASE.key; then
	echo "$SVR_BASE.key exists"
else
	echo "generating $SVR_BASE.key"
	openssl genrsa -out $SVR_BASE.key $BITS || error "could not genrsa"
fi
if test -f $CTL_BASE.key; then
	echo "$CTL_BASE.key exists"
else
	echo "generating $CTL_BASE.key"
	openssl genrsa -out $CTL_BASE.key $BITS || error "could not genrsa"
fi

# create self-signed cert for server
echo "[req]\n" > request.cfg
echo "default_bits=$BITS\n" >> request.cfg
echo "default_md=$HASH\n" >> request.cfg
echo "prompt=no\n" >> request.cfg
echo "distinguished_name=req_distinguished_name\n" >> request.cfg
echo "\n" >> request.cfg
echo "[req_distinguished_name]\n" >> request.cfg
echo "commonName=$SERVERNAME\n" >> request.cfg

test -f request.cfg || error "could not create request.cfg"

echo "create $SVR_BASE.pem (self signed certificate)"
openssl req -key $SVR_BASE.key -config request.cfg  -new -x509 -days $DAYS -out $SVR_BASE.pem || error "could not create $SVR_BASE.pem"
# create trusted usage pem
openssl x509 -in $SVR_BASE.pem -addtrust serverAuth -out $SVR_BASE"_trust.pem"

# create client request and sign it, piped
echo "[req]\n" > request.cfg
echo "default_bits=$BITS\n" >> request.cfg
echo "default_md=$HASH\n" >> request.cfg
echo "prompt=no\n" >> request.cfg
echo "distinguished_name=req_distinguished_name\n" >> request.cfg
echo "\n" >> request.cfg
echo "[req_distinguished_name]\n" >> request.cfg
echo "commonName=$CLIENTNAME\n" >> request.cfg

test -f request.cfg || error "could not create request.cfg"

echo "create $CTL_BASE.pem (signed client certificate)"
openssl req -key $CTL_BASE.key -config request.cfg -new | openssl x509 -req -days $DAYS -CA $SVR_BASE"_trust.pem" -CAkey $SVR_BASE.key -CAcreateserial -$HASH -out $CTL_BASE.pem
test -f $CTL_BASE.pem || error "could not create $CTL_BASE.pem"
# create trusted usage pem
# openssl x509 -in $CTL_BASE.pem -addtrust clientAuth -out $CTL_BASE"_trust.pem"

# see details with openssl x509 -noout -text < $SVR_BASE.pem
# echo "create $CTL_BASE""_browser.pfx (web client certificate)"
# echo "create webbrowser PKCS#12 .PFX certificate file. In Firefox import in:"
# echo "preferences - advanced - encryption - view certificates - your certs"
# echo "empty password is used, simply click OK on the password dialog box."
# openssl pkcs12 -export -in $CTL_BASE"_trust.pem" -inkey $CTL_BASE.key -name "unbound remote control client cert" -out $CTL_BASE"_browser.pfx" -password "pass:" || error "could not create browser certificate"

# remove unused permissions
chmod 660 $SVR_BASE.pem $SVR_BASE.key $CTL_BASE.pem $CTL_BASE.key

# remove crap
rm -f request.cfg
rm -f $CTL_BASE"_trust.pem" $SVR_BASE"_trust.pem" $SVR_BASE"_trust.srl"

echo "Setup success. Certificates created. Enable in unbound.conf file to use"

# choose from a set of predefined servers for now, no idea why running these commands in adb shell works ok
# but having them in this script, after the initial 'cat resolvers', nothing is outputted

#if test -f ./dnscrypt-proxy.conf; then
    echo "dnscrypt-proxy.conf exists, using those servers..."
#else
#    echo "Picking 4 random DNSCrypt servers..."
#    # get only the DNSSEC enabled servers, no IPv6 for now, randomize them (there is no sort -R on busybox/Android), use the first 4
#    cat ./dnscrypt-resolvers.csv | cut -d "," -f 1 | while read line;do echo $(od -An -N2 -t d /dev/urandom)'|'$line;done |sort|cut -d"|" -f2- | head -4 > ./dnscrypt-proxy.conf
#    # assign variable names to each one
#    sed -i -e '1 s/^/RESOLVER_1=/' -e '2 s/^/RESOLVER_2=/' -e '3 s/^/RESOLVER_3=/' -e '4 s/^/RESOLVER_4=/' ./dnscrypt-proxy.conf
#fi

source ./dnscrypt-proxy.conf

#first server used is the first one that responds between 1 and 2
while :; do
# check first server
      RESOLVER_NAME1="$RESOLVER_1"
      LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH \
        ./dnscrypt-proxy \
        --resolver-name="$RESOLVER_NAME1" \
        --resolvers-list=./dnscrypt-resolvers.csv \
        --test=3600
        case "$?" in
                0|4 ) break;;
        esac
        sleep 1

# check second server
      RESOLVER_NAME1="$RESOLVER_2"
      LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH \
        ./dnscrypt-proxy \
        --resolver-name="$RESOLVER_NAME1" \
        --resolvers-list=./dnscrypt-resolvers.csv \
        --test=3600
        case "$?" in
                0|4 ) break;;
        esac
        sleep 1

      echo "Retrying... is the connection even on?"
done


#second server used is the first that responds between 3 and 4
while :; do
# check third server
      RESOLVER_NAME2="$RESOLVER_3"
      LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH \
        ./dnscrypt-proxy \
        --resolver-name="$RESOLVER_NAME2" \
        --resolvers-list=./dnscrypt-resolvers.csv \
        --test=3600
        case "$?" in
                0|4 ) break;;
        esac
        sleep 1

# check fourth server
      RESOLVER_NAME2="$RESOLVER_4"
      LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH \
        ./dnscrypt-proxy \
        --resolver-name="$RESOLVER_NAME2" \
        --resolvers-list=./dnscrypt-resolvers.csv \
        --test=3600
        case "$?" in
                0|4 ) break;;
        esac
        sleep 1

      echo "Retrying... is the connection even on?"
done

echo "Connecting to $RESOLVER_NAME1..."
LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH \
./dnscrypt-proxy \
--daemonize \
--ephemeral-keys \
--local-address=127.0.0.1:5301 \
--loglevel=3 \
--resolver-name="$RESOLVER_NAME1" \
--resolvers-list=./dnscrypt-resolvers.csv

echo "Connecting to $RESOLVER_NAME2..."
LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH \
./dnscrypt-proxy \
--daemonize \
--ephemeral-keys \
--local-address=127.0.0.1:5302 \
--loglevel=3 \
--resolver-name="$RESOLVER_NAME2" \
--resolvers-list=./dnscrypt-resolvers.csv

echo "DNSCrypt-proxy might be running..."

exit 0
